/*
 * Copyright (c) 2011-2014 The original author or authors
 * ------------------------------------------------------
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Apache License v2.0 which accompanies this distribution.
 *
 *     The Eclipse Public License is available at
 *     http://www.eclipse.org/legal/epl-v10.html
 *
 *     The Apache License v2.0 is available at
 *     http://www.opensource.org/licenses/apache2.0.php
 *
 * You may elect to redistribute this code under either of these licenses.
 */

package io.vertx.ext.jdbc;

import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;

import java.util.List;

/**
 * The SQL operations that are supported for the JDBC service.
 *
 * @author <a href="mailto:nscavell@redhat.com">Nick Scavelli</a>
 */
@VertxGen(concrete = false)
@ProxyGen
public interface JdbcActions {

  /**
   * Executes the given SQL statement
   *
   * @param sql the SQL to execute. For example <code>CREATE TABLE IF EXISTS table ...</code>
   * @param resultHandler the handler which is called once this operation completes.
   * @see java.sql.Statement#execute(String)
   */
  void execute(String sql, Handler<AsyncResult<Void>> resultHandler);

  /**
   * Executes the given SQL <code>SELECT</code> statement which returns the results of the query.
   *
   * @param sql the SQL to execute. For example <code>SELECT * FROM table ...</code>.
   * @param params if the SQL statement is to be a prepared statement, these are the parameters to fill the statement. Pass null if
   * the statement is not a prepared statement.
   * @param resultHandler the handler which is called once the operation completes. It will return a list of <code>JsonObject</code>'s
   * which represent the ResultSet. So column names are keys, and values are of course values.
   *
   * @see java.sql.Statement#executeQuery(String)
   * @see java.sql.PreparedStatement#executeQuery(String)
   */
  void query(String sql, JsonArray params, Handler<AsyncResult<List<JsonObject>>> resultHandler);

  /**
   * Executes the given SQL statement which may be an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>
   * statement.
   *
   * @param sql the SQL to execute. For example <code>INSERT INTO table ...</code>
   * @param params if the SQL statement is to be a prepared statement, these are the parameters to fill the statement. Pass null if
   * the statement is not a prepared statement.
   * @param resultHandler the handler which is called once the operation completes. The result will be a <code>JsonObject</code>
   * with the format
   * <pre>
   * {
   *   "updated" : 1,
   *   "keys" : []
   * }
   * </pre>
   * where <code>updated</code> is the number of rows effected by the SQL statement and <code>keys</code> is an array of autogenerated keys
   * if the statement is an <code>INSERT</code> and contains auto generated keys.
   *
   * @see java.sql.Statement#executeUpdate(String)
   * @see java.sql.PreparedStatement#executeUpdate(String)
   */
  void update(String sql, JsonArray params, Handler<AsyncResult<JsonObject>> resultHandler);
}
